version: 2

resource_job_defaults: &resource_job_defaults
  docker:  [{image: 'circleci/ruby:2.4.1'}]
  steps:
    - run:
        name: verify that job ran with the requested resource_class option
        command: |
          curl -k \
          "$CIRCLE_HOSTNAME/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM?\
          circle-token=$CIRCLE_TOKEN" | \
          jq '.picard.resource_class.class' | grep $CIRCLE_JOB

remote_docker_defaults: &remote_docker_defaults
  docker: [{image: 'docker:17.06-git'}]

basic_docker_build: &basic_docker_build
  name: "Build a really basic docker image"
  command: |
    dockerfile=Dockerfile
    echo "FROM alpine:latest" > $dockerfile
    echo "RUN echo hello" >> $dockerfile
    docker build -f $dockerfile --tag throwaway:$CIRCLE_BUILD_NUM .
    docker run --rm throwaway:$CIRCLE_BUILD_NUM

contexts_defaults: &contexts_defaults
  docker: [{image: 'alpine:latest'}]
  working_directory: /a/contexts/test

workspaces_defaults: &workspaces_defaults
  docker: [{image: 'circleci/node:latest'}]
  working_directory: ~/foo/bar

ssh_defaults: &ssh_defaults
  docker: [{image: 'circleci/node:latest'}]
  working_directory: ~/foo/bar

jobs:
  # resource class jobs
  small: # 1 vCPU, 2GB RAM
    <<: *resource_job_defaults
    resource_class: small

  medium: # 2 vCPUs, 4GB RAM
    <<: *resource_job_defaults
    resource_class: medium

  medium+: # 3 vCPUs, 6GB RAM
    <<: *resource_job_defaults
    resource_class: medium+

  large: # 4 vCPUs, 8GB RAM
    <<: *resource_job_defaults
    resource_class: large

  xlarge: # 8 vCPUs, 16GB RAM
    <<: *resource_job_defaults
    resource_class: xlarge

  # vm jobs
  machine:
    machine: true
    steps:
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  remote_docker:
    <<: *remote_docker_defaults
    steps:
      - run: which docker
      - run: docker -v
      - setup_remote_docker
      - run:
          <<: *basic_docker_build
      - run: docker version

  docker_layer_caching:
    <<: *remote_docker_defaults
    steps:
      - run: which docker
      - run: docker -v
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          <<: *basic_docker_build
      - run: docker version

  machine_dlc:
    machine:
      docker_layer_caching: true
    steps:
      - run: which docker
      - run: docker -v
      - run:
          <<: *basic_docker_build
      - run: docker version

  # feature jobs
  contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep CONTEXT_END_TO_END_TEST_VAR

  multi-contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep MULTI_CONTEXT_END_TO_END_VAR

  write_workspace:
    <<: *workspaces_defaults
    steps:
      - run: mkdir stuff
      - run: echo 5 >./stuff/thing
      - persist_to_workspace:
          root: .
          paths:
            - stuff

  read_workspace:
    <<: *workspaces_defaults
    steps:
      - attach_workspace:
           at: ./attached
      - run: |
          if [[ $(< ./attached/stuff/thing) != '5' ]]; then
            echo 'Sadness, the value is not what we expected, so the workspace write/read did not work'
            exit 1
          else
            echo 'Yay, value matches'
            exit 0
          fi

  save_and_restore_cache:
    docker:
      - image: circleci/python
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run: mkdir -p stuff
      - run: echo 5 >./stuff/thing

      - save_cache:
          key: v3-file-cache-{{ .BuildNum }}
          paths:
            - ./stuff/thing

      - run: rm -rf ./stuff/thing
      - run: sleep 5

      - restore_cache:
            keys:
              - v3-file-cache-{{ .BuildNum }}

      - run: |
            if [[ $(< stuff/thing) != '5' ]]; then
              exit 1
            else
              echo "The cache was populated"
            fi

  artifacts_test_results:
    docker:
      - image: python:3.6.0
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1.txt;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2.txt;

      - store_artifacts:
          path: /tmp/artifact-1.txt
          destination: artifact-file.txt

      - store_artifacts:
          path: /tmp/artifacts

      - store_test_results:
          path: test-results

  start_ssh_job:
    <<: *ssh_defaults
    steps:
      - run: |
          echo 'SSH_TEST_VAR="success"' >> $BASH_ENV
          source $BASH_ENV
          mkdir -p build
          echo "$CIRCLE_BUILD_NUM" > ./build/number
      - persist_to_workspace:
          root: .
          paths:
            - build

  try_ssh:
    <<: *ssh_defaults
    steps:
      - attach_workspace:
           at: ./attached
      - run: |
          set -u
          BUILD_NUMBER="$(cat ./attached/build/number)"
          DEBUG_OUTPUT="${DEBUG:-}"
          if [[ -z "${BUILD_NUMBER}" ]]; then
            echo "build number not set"
            exit 1
          fi
          BASE_URL="$(cut -d/ -f1-3 <<< "$CIRCLE_BUILD_URL")"
          VCS_TYPE="github"
          URL="$BASE_URL/api/v1.1/project/$VCS_TYPE/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$BUILD_NUMBER/ssh?circle-token=$CIRCLE_TOKEN"
          I=0
          LIMIT=10
          TIMEOUT=5
          while [[ $I -lt $LIMIT ]]; do
            CURL_RETRY_SSH_RESPONSE="$(curl -s -k -XPOST "$URL")"
            if [ "$DEBUG_OUTPUT" = "true" ]; then
              echo "retry build with ssh api response: ${CURL_RETRY_SSH_RESPONSE}"
            fi
            SSH_BUILD_NUM="$(jq -r '.build_num' <<< "${CURL_RETRY_SSH_RESPONSE}")"
            echo "ssh build num: '$SSH_BUILD_NUM'"
            if [[ -z "$SSH_BUILD_NUM" ]] || [ "$SSH_BUILD_NUM" = "null" ]; then
              I=$((I+1))
              sleep $TIMEOUT
            else
              break
            fi
          done
          if [[ -z "$SSH_BUILD_NUM" ]] || [ "$SSH_BUILD_NUM" = "null" ]; then
            echo "--Error retrying build ${BUILD_NUMBER} with SSH"
            exit 1
          fi
          BUILD_URL="$BASE_URL/api/v1.1/project/$VCS_TYPE/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$SSH_BUILD_NUM?circle-token=$CIRCLE_TOKEN"
          I=0
          while [[ $I -lt $LIMIT ]]; do
            CURL_GET_BUILD_RESPONSE="$(curl -s -k "$BUILD_URL")"
            if [ "$DEBUG_OUTPUT" = "true" ]; then
              echo "get build api response: ${CURL_GET_BUILD_RESPONSE}"
            fi
            SSH_HOST_PORT="$(jq -r '.picard.ssh_servers[0].server' <<< "${CURL_GET_BUILD_RESPONSE}")"
            echo "ssh host: '$SSH_HOST_PORT'"
            if [[ -z "$SSH_HOST_PORT" ]] || [ "$SSH_HOST_PORT" = "null" ]; then
              I=$((I+1))
              sleep $TIMEOUT
            else
              break
            fi
          done
          if [[ -z "$SSH_HOST_PORT" ]] || [ "$SSH_HOST_PORT" = "null" ]; then
            echo "--Error fetching build ${SSH_BUILD_NUM} or build does not contain SSH information"
            exit 1
          fi
          SSH_HOST="$(cut -d':' -f1 <<< "${SSH_HOST_PORT}")"
          SSH_PORT="$(cut -d':' -f2 <<< "${SSH_HOST_PORT}")"
          echo "--Adding SSH key"
          echo "${TEST_SSH_KEY_B64}" | base64 -d > id_rsa
          chmod 600 id_rsa
          ssh-add id_rsa
          sleep 30
          RESULT="$(ssh -o StrictHostKeyChecking=no -p "${SSH_PORT}" "${SSH_HOST}" 'bash -c "source $BASH_ENV && echo $SSH_TEST_VAR"')"
          EXPECT="success"
          if [ "${RESULT}" != "${EXPECT}" ]; then
            echo "--Got '${RESULT}', Expected '${EXPECT}'"
            exit 1
          fi
          echo "--SSH Test Successful"
workflows:
  version: 2
  resource_class_jobs:
    jobs:
      - small
      - medium
      - medium+
      - large
      - xlarge

  vm_jobs:
    jobs:
      - machine
      - remote_docker
      - docker_layer_caching
      - machine_dlc

  feature_jobs:
    jobs:
      - save_and_restore_cache
      - contexts:
          context: org-global
      - multi-contexts:
          context: individual-local
      - write_workspace
      - read_workspace:
          requires:
            - write_workspace
      - artifacts_test_results
      - start_ssh_job
      - try_ssh:
          requires:
            - start_ssh_job
